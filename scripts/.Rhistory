mart = useMart("ensembl", dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_gene_id", "entrezgene_id"),
"ensembl_gene_id",
gene_list, mart)
write.table(g, "gene_entrez_for_g1g2gtex", sep='\t')
}
g
tabFn <- "F:/ntuh/20201221_data/MP/pot_biomarkers.tsv"
tab <- read.csv(tabFn, header = 1, sep='\t')
tab
gene_list <- tab["x"]
if (interactive()){
mart = useMart("ensembl", dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_gene_id_version", "description"),
"ensembl_gene_id_version",
gene_list, mart)
write.table(g, "pred_gene_info.csv")
}
write.csv(g, "pred_gene_info.csv")
library(dplyr)
library(glue)
library(MLSeq)
merged_counts <- read.table("./merged_count.tsv", sep='\t', header = 1, row.names = 2)
merged_counts <- merged_counts[, 2:50]
vars <- sort(apply(merged_counts, 1, var, na.rm = TRUE), decreasing = TRUE)
data <- merged_counts[names(vars)[1:2000], ]
row.names(data) <- sapply(row.names(data), FUN = function(x){substr(x, 1, 15)} )
gtex_counts <- read.table("f:/ntuh/processed_data/merged_counts_and_GTEx_3.tsv", sep='\t', header = 1)
gtex_counts <- gtex_counts[gtex_counts[, 2] %in% row.names(data), ]
label <- read.table("./merged_count_label.tsv", sep=',', header = 1, row.names = 1)
meta <- read_excel("../all_info/labels.xlsx")
groups <- as.vector(glue("G{label$lab}"))
countsData <- as.matrix(merged_counts[, 1:49])
rownames(countsData) <- rownames(merged_counts)
sampInfo <- data.frame(groups=groups)
rownames(sampInfo) <- colnames(countsData)
all_data = data[, (groups == "G2") | (groups == "G1")] %>%
dplyr::select(-C001)
data.test.label <- c("X025", "X032", "X004", "X006", "C010", "C011", "C012")
cond.test <- c("G2", "G2", "G2", "G2", "G1", "G1", "G1") # there are two G3s in fact
data.test <- data %>%
dplyr::select(all_of(data.test.label))
data.gtex <- gtex_counts %>%
dplyr::select(all_of(colnames(gtex_counts)[23:777]))
cond.gtex <-ifelse(grepl("GTEX.*", colnames(gtex_counts)[23:777]), "G1", "G2")
classgt <- DataFrame(condition = cond.gtex)
data.train <- data[, (groups == "G2") | (groups == "G1")] %>%
dplyr::select(-C001, -X025, -X032, -C010, -C011, -C012)
data.train.label <- colnames(data.train)
cond.train <-ifelse(grepl("C.*", data.train.label), "G1", "G2")
merged_counts <- read.table("f:/ntuh/processed_data/merged_count.tsv", sep='\t', header = 1, row.names = 2)
merged_counts <- merged_counts[, 2:50]
vars <- sort(apply(merged_counts, 1, var, na.rm = TRUE), decreasing = TRUE)
data <- merged_counts[names(vars)[1:2000], ]
row.names(data) <- sapply(row.names(data), FUN = function(x){substr(x, 1, 15)} )
gtex_counts <- read.table("f:/ntuh/processed_data/merged_counts_and_GTEx_3.tsv", sep='\t', header = 1)
gtex_counts <- gtex_counts[gtex_counts[, 2] %in% row.names(data), ]
label <- read.table("f:/ntuh/processed_data/merged_count_label.tsv", sep=',', header = 1, row.names = 1)
meta <- read_excel("f:/ntuh/all_info/labels.xlsx")
groups <- as.vector(glue("G{label$lab}"))
countsData <- as.matrix(merged_counts[, 1:49])
rownames(countsData) <- rownames(merged_counts)
sampInfo <- data.frame(groups=groups)
rownames(sampInfo) <- colnames(countsData)
all_data = data[, (groups == "G2") | (groups == "G1")] %>%
dplyr::select(-C001)
data.test.label <- c("X025", "X032", "X004", "X006", "C010", "C011", "C012")
cond.test <- c("G2", "G2", "G2", "G2", "G1", "G1", "G1") # there are two G3s in fact
data.test <- data %>%
dplyr::select(all_of(data.test.label))
data.gtex <- gtex_counts %>%
dplyr::select(all_of(colnames(gtex_counts)[23:777]))
cond.gtex <-ifelse(grepl("GTEX.*", colnames(gtex_counts)[23:777]), "G1", "G2")
classgt <- DataFrame(condition = cond.gtex)
data.train <- data[, (groups == "G2") | (groups == "G1")] %>%
dplyr::select(-C001, -X025, -X032, -C010, -C011, -C012)
data.train.label <- colnames(data.train)
cond.train <-ifelse(grepl("C.*", data.train.label), "G1", "G2")
library(DESeq2)
classgt <- DataFrame(condition = cond.gtex)
data.train <- data[, (groups == "G2") | (groups == "G1")] %>%
dplyr::select(-C001, -X025, -X032, -C010, -C011, -C012)
data.train.label <- colnames(data.train)
cond.train <-ifelse(grepl("C.*", data.train.label), "G1", "G2")
data.train <- as.matrix(data.train)
data.test <- as.matrix(data.test)
data.gtex <- as.matrix(data.gtex)
classtr <- DataFrame(condition = cond.train)
classts <- DataFrame(condition = cond.test)
data.test2 <- data[, (groups == "G4")]
data.test2 <- as.matrix(data.test2)
classts2 <- DataFrame(condition = groups[(groups == "G4")])
data.test3 <- data %>%
dplyr::select(C001)
data.test3 <- as.matrix(data.test3)
classts3 <- DataFrame(condition = c("G3"))
data.trainS4 = DESeqDataSetFromMatrix(countData = data.train, colData = classtr,
design = formula(~condition))
data.testS4 = DESeqDataSetFromMatrix(countData = data.test, colData = classts,
design = formula(~condition))
data.test2S4 = DESeqDataSetFromMatrix(countData = data.test3, colData = classts3,
design = formula(~1))
data.gtexS4 = DESeqDataSetFromMatrix(countData = data.gtex, colData = classgt, design = formula(~1))
fit <- classify(data = data.trainS4, method = "voomNSC",
normalize = "deseq", ref = "G1",
control = voomControl(tuneLength = 20))
show(fit)
predict(fit, data.testS4)
predict(fit, data.test2S4)
data.test2S4 = DESeqDataSetFromMatrix(countData = data.test2, colData = classts2,
design = formula(~1))
predict(fit, data.test2S4)
classts2
data.test2
colnames(data.test2)
predict(fit, data.gtexS4)
predict(fit, data.gtexS4) == "G1"
lenght(predict(fit, data.gtexS4)[predict(fit, data.gtexS4) == "G1"])
length(predict(fit, data.gtexS4)[predict(fit, data.gtexS4) == "G1"])
tabFn <- "F:/ntuh/20201221_data/catboost.csv"
tab <- read.csv(tabFn, header = 1)
tab
gene_list <- tab["catboost"]
if (interactive()){
mart = useMart("ensembl", dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_gene_id", "description"),
"ensembl_gene_id",
gene_list, mart)
write.csv(g, "catboost_predgene_info.csv")
}
library(biomaRt)
library(glue)
if (interactive()){
mart = useMart("ensembl", dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_gene_id", "description"),
"ensembl_gene_id",
gene_list, mart)
write.csv(g, "catboost_predgene_info.csv")
}
hsaDBName <- "hsapiens_gene_ensembl"
OUTDIR <- "F:/ntuh"
if (interactive()){
mart = useMart("ensembl", dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_gene_id", "description"),
"ensembl_gene_id",
gene_list, mart)
write.csv(g, "catboost_predgene_info.csv")
}
library(sva)
library(RSkittleBrewer)
require(dplyr)
rm(list = ls())
trop = RSkittleBrewer('tropical')
tablePth <- file.path("f:/ntuh/processed_data/merged_count.tsv") # merged_counts_and_GTEx_3
table <- read.table(tablePth, sep='\t', header = T)
iscontrol <- function(t){
if ((substr(t, 1, 1) == "C") || (substr(t, 1, 4) == "GTEX")){
return (T)
}
return (F)
}
isNTUHdata <- function(t){
if (substr(t, 1, 4) == "GTEX"){
return (F)
}
return (T)
}
cleanY = function(y, mod, svs) {
y <- log(y + 1)
X = cbind(mod, svs)
Hat = solve(t(X) %*% X) %*% t(X)
beta = (Hat %*% t(y))
rm(Hat)
gc()
P = ncol(mod)
return ((exp(y - t(as.matrix(X[,-c(1:P)]) %*% beta[-c(1:P),])) - 1))
}
ntuh <- sapply(colnames(table)[3:length(colnames(table))], isNTUHdata)
data_ntuh <- table[3:length(colnames(table))][,ntuh]
ctrs <- sapply(colnames(data_ntuh), iscontrol)
groups <- as.factor(ifelse(ctrs, 1, -1))
data <- as.matrix(data_ntuh)
row.names(data) <- table[, 2]
row_sub = apply(data, 1, function(row) any(row !=0 ))
mod1 = model.matrix(~groups)
mod0 = cbind(mod1[,1])
batch_sup_sva = svaseq(data[row_sub, ],mod1,mod0)
cleaned_data = cleanY(data[row_sub, ], mod1, batch_sup_sva$sv)
library(sva)
BiocManager::install("sva")
library(sva)
tablePth <- file.path("f:/ntuh/processed_data/merged_count.tsv") # merged_counts_and_GTEx_3
table <- read.table(tablePth, sep='\t', header = T)
ntuh <- sapply(colnames(table)[3:length(colnames(table))], isNTUHdata)
data_ntuh <- table[3:length(colnames(table))][,ntuh]
ctrs <- sapply(colnames(data_ntuh), iscontrol)
groups <- as.factor(ifelse(ctrs, 1, -1))
data <- as.matrix(data_ntuh)
row.names(data) <- table[, 2]
row_sub = apply(data, 1, function(row) any(row !=0 ))
mod1 = model.matrix(~groups)
mod0 = cbind(mod1[,1])
batch_sup_sva = svaseq(data[row_sub, ],mod1,mod0)
cleaned_data = cleanY(data[row_sub, ], mod1, batch_sup_sva$sv)
cleaned_data
write.table(cleaned_data, "f:/ntuh/processed_data/rvsva_data_gall", sep='\t')
library(biomaRt)
library(glue)
hsaDBName <- "hsapiens_gene_ensembl"
?path
?path.expand
library(biomaRt)
library(glue)
hsaDBName <- "hsapiens_gene_ensembl"
OUTDIR <- "C:/Users/user/Reasearch/code/Thesis"
mart = useMart("ensembl", dataset="hsapiens_gene_ensembl")
fn <- file.path(OUTDIR, "Gene_info.tsv")
tab <- read.csv(fn, sep='\t')
OUTDIR <- "C:/Users/user/Research/code/Thesis"
tab <- read.csv(fn, sep='\t')
fn <- file.path(OUTDIR, "Gene_info.tsv")
tab <- read.csv(fn, sep='\t')
fn
tab$i.Gene
listAttributes(mart)
grep("length", listAttributes(mart))
regexpr("leng", listAttributes(mart))
regexpr("leng", listAttributes(mart))["match.length"]
regexpr("leng", listAttributes(mart))$match.length
a = regexpr("leng", listAttributes(mart))
listAttributes(mart)[[342:377]]
listAttributes(mart)[342:377]
searchAttributes(mart = mart, 'leng')
searchAttributes(mart = mart, 'len')
g = getBM(c("ensembl_gene_id_version", "transcript_length"),
"ensembl_gene_id_version",
tab$i.Gene, mart)
g
names(tab)
names(g) = c("gene", "transcript_length")
write.table(g, file.path(OUTDIR, "annot_Gene_info.tsv"), sep='\t')
?write.table
packageVersion("featureCounts")
packageVersion("featureCount")
Rsubread
packageVersion("Rsubread")
library(MASS)
library(class)
library(cluster)
library(impute)
library(Hmisc)
library(WGCNA)
library(DESeq2)
library(stringr)
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="min")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
outliers <- c("R031", "R040", "R046", "R050", "R054")
type <- "signed"
sampleInfo <- read.table("../data/all_info/labels.csv", sep='\t', header = TRUE)
sampleInfo <- sampleInfo[-match(outliers, sampleInfo$sample),]
countTable <- read.table("../data/mg_counts.tsv", sep='\t', header = TRUE)
countsData <- as.matrix(countTable[,2:dim(countTable)[2]])
colnames(countsData) <- str_match(colnames(countsData), "(.*)A")[,2]
rownames(countsData) <- countTable$gene
countsData <- countsData[, -match(outliers, colnames(countsData))]
sampleInfo$group <- factor(sampleInfo$group)
sampleInfo$batch <- factor(sampleInfo$batch)
dds <- DESeqDataSetFromMatrix(countsData[, sampleInfo$sample],
colData = sampleInfo,
design = ~batch + group)
vsd <- vst(dds)
vsdData <- log2(vsd@assays@data@listData[[1]] + 1)
vsdData <- t(quantile_normalisation(vsdData))
gsg = goodSamplesGenes(vsdData, verbose = 3)
gsg$allOK
if (!gsg$allOK){
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:",
paste(names(vsdData)[!gsg$goodGenes], collapse = ",")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:",
paste(rownames(vsdData)[!gsg$goodSamples], collapse = ",")));
# Remove the offending genes and samples from the data:
vsdData = vsdData[gsg$goodSamples, gsg$goodGenes]
}
dim(vsdData)
sampleTree = hclust(dist(vsdData), method = "average")
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="")
powers1 <- c(seq(1, 10, by=1), seq(12, 20, by=2))
sft <- pickSoftThreshold(vsdData, powerVector = powers1, networkType = type)
RpowerTable <- sft[[2]]
cex1 = 0.7
par(mfrow = c(1,2))
plot(RpowerTable[,1], -sign(RpowerTable[,3])*RpowerTable[,2], xlab = "soft threshold (power)", ylab = "scale free topology model fit, signes R^2", type = "n")
text(RpowerTable[,1], -sign(RpowerTable[,3])*RpowerTable[,2], labels = powers1, cex = cex1, col = "red")
abline(h = 0.95, col = "red")
plot(RpowerTable[,1], RpowerTable[,5], xlab = "soft threshold (power)", ylab = "mean connectivity", type = "n")
text(RpowerTable[,1], RpowerTable[,5], labels = powers1, cex = cex1, col = "red")
sft$powerEstimate
power = 4
par(mfrow=c(1, 1))
k.data <- softConnectivity(vsdData, power = power, type = type) -1
scaleFreePlot(k.data, main = paste("data set I, power=", power), truncated = F)
net = blockwiseModules(vsdData, power = betal, maxBlockSize = 40000,
TOMType = type, minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs=TRUE, corType = "pearson",
maxPOutliers=1, loadTOMs=TRUE,
saveTOMFileBase = paste0("wgcna", ".tom"),
verbose = 3)
net = blockwiseModules(vsdData, power = power, maxBlockSize = 40000,
TOMType = type, minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs=TRUE, corType = "pearson",
maxPOutliers=1, loadTOMs=TRUE,
saveTOMFileBase = paste0("wgcna", ".tom"),
verbose = 3)
net
library(STRINGdb)
library(biomaRt)
library(glue)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
hsaDBName <- "hsapiens_gene_ensembl"
hostName <- "http://may2015.archive.ensembl.org"
string_db <- STRINGdb$new( version="11", species=9606,
score_threshold=200, input_directory="")
table_name <- "DE_D2_D0.tsv"
table <- read.table(file.path("../tables/T1_DEGs", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table$gene <- row.names(table)
table_name <- "DE_2_1.tsv"
table <- read.table(file.path("../DEG/tables", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table$gene <- row.names(table)
table_name <- "DE_2_1.tsv"
table <- read.table(file.path("../DEG/tables", table_name), sep='\t')
table <- read.table(file.path("..results/DEG/tables", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table
table <- read.table(file.path("../results/DEG/tables", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table$gene <- row.names(table)
table
if(interactive()){
mart = useMart("ensembl", host=hostName, dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_peptide_id", "ensembl_gene_id_version"),
"ensembl_gene_id_version",
table$gene, mart)
names(table)[names(table) == "gene"] <- "ensembl_gene_id_version"
}
if(interactive()){
mart = useMart("ensembl", host=hostName, dataset=hsaDBName)
g = getBM(c("hgnc_symbol", "ensembl_peptide_id", "ensembl_gene_id"),
"ensembl_gene_id",
table$gene, mart)
names(table)[names(table) == "gene"] <- "ensembl_gene_id"
}
annotTable <- read.table(file.path("../data/gene_peptide.tsv"), sep='\t')
annotTable <- read.delim(file.path("../data/gene_peptide.tsv"), sep='\t')
annotTable
annotTable <- read.delim(file.path("../data/gene_peptide.tsv"), sep='\t')[,2:3]
grp <- "2_1"
out_table <- glue("G{grp}.tsv")
out_plot <- glue("G{grp}")
table_name <- glue("DE_{grp}.tsv")
table <- read.table(file.path("../results/DEG/tables", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table$gene <- row.names(table)
table
merged_g <- merge(x = g, y = table, by="gene")
g_mapped <- string_db$map( merged_g[order(merged_g$padj, decreasing = F),],
"ensembl_peptide_id",
removeUnmappedRows = TRUE )
merged_g <- merge(x = annotTable, y = table, by="gene")
g_mapped <- string_db$map( merged_g[order(merged_g$padj, decreasing = F),],
"ensembl_peptide_id",
removeUnmappedRows = TRUE )
g_mapped
hits <- g_mapped$STRING_id[1:300]
mapped_pval05 <- string_db$add_diff_exp_color( subset(g_mapped, padj<0.05),
logFcColStr="log2FoldChange" )
enrichment <- string_db$get_enrichment( hits )
write.table(mapped_pval05, file.path(table_dest, "mapped", out_table), sep = '\t')
write.table(enrichment, file.path(table_dest, "enrichment", out_table), sep = '\t')
table_dest <- "../results/PPI"
plot_dest <- "../results/PPI"
write.table(mapped_pval05, file.path(table_dest, "mapped", out_table), sep = '\t')
write.table(enrichment, file.path(table_dest, "enrichment", out_table), sep = '\t')
payload_id <- string_db$post_payload( mapped_pval05$STRING_id,
colors=mapped_pval05$color )
jpeg(file.path(plot_dest, glue("{out_plot}_top300.jpeg")),
width = 9, height = 9, units = "in",
res = 300, quality = 100)
string_db$plot_network( hits, payload_id=payload_id )
dev.off()
clustersList <- string_db$get_clusters(g_mapped$STRING_id[1:1000])
for (i in c(1: length(clustersList))) {
if (length(clustersList[[i]]) > 4){
jpeg(file.path(plot_dest, glue("{out_plot}_cluster_{i}.jpeg")),
width = 9, height = 9, units = "in",
res = 300, quality = 100)
string_db$plot_network(clustersList[[i]], payload_id=payload_id)
dev.off()
}
}
g_mapped
clustersList[[1]]
string_db
string_db$get_ppi_enrichment?
write.table(mapped_pval05, file.path(table_dest, "mapped", out_table), sep = '\t')
string_db$get_ppi_enrichment?
write.table(mapped_pval05, file.path(table_dest, "mapped", out_table), sep = '\t')
string_db$get_ppi_enrichment?
string_db$get_ppi_enrichment
?string_db$get_ppi_enrichment?
string_db$get_ppi_enrichment
help(string_db$get_ppi_enrichment)
annotations <- string_db$get_annotations( hits )
annotations
head(annotations)
write.table(annotations, file.path(table_dest, "annotations", out_table), sep = '\t')
grp <- "4_1"
out_table <- glue("G{grp}.tsv")
out_plot <- glue("G{grp}")
table_name <- glue("DE_{grp}.tsv")
table <- read.table(file.path("../results/DEG/tables", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table$gene <- row.names(table)
merged_g <- merge(x = annotTable, y = table, by="gene")
g_mapped <- string_db$map( merged_g[order(merged_g$padj, decreasing = F),],
"ensembl_peptide_id",
removeUnmappedRows = TRUE )
hits <- g_mapped$STRING_id[1:300]
mapped_pval05 <- string_db$add_diff_exp_color( subset(g_mapped, padj<0.05),
logFcColStr="log2FoldChange" )
enrichment <- string_db$get_enrichment( hits )
annotations <- string_db$get_annotations( hits )
write.table(mapped_pval05, file.path(table_dest, "mapped", out_table), sep = '\t')
write.table(enrichment, file.path(table_dest, "enrichment", out_table), sep = '\t')
write.table(annotations, file.path(table_dest, "annotations", out_table), sep = '\t')
payload_id <- string_db$post_payload( mapped_pval05$STRING_id,
colors=mapped_pval05$color )
jpeg(file.path(plot_dest, glue("{out_plot}_top300.jpeg")),
width = 9, height = 9, units = "in",
res = 300, quality = 100)
string_db$plot_network( hits, payload_id=payload_id )
dev.off()
clustersList <- string_db$get_clusters(g_mapped$STRING_id[1:1000])
for (i in c(1: length(clustersList))) {
if (length(clustersList[[i]]) > 4){
jpeg(file.path(plot_dest, glue("{out_plot}_cluster_{i}.jpeg")),
width = 9, height = 9, units = "in",
res = 300, quality = 100)
string_db$plot_network(clustersList[[i]], payload_id=payload_id)
dev.off()
}
}
grp <- "4_2"
out_table <- glue("G{grp}.tsv")
out_plot <- glue("G{grp}")
table_name <- glue("DE_{grp}.tsv")
table <- read.table(file.path("../results/DEG/tables", table_name), sep='\t')
table <- table[order(table$padj, decreasing = F),]
table$gene <- row.names(table)
merged_g <- merge(x = annotTable, y = table, by="gene")
g_mapped <- string_db$map( merged_g[order(merged_g$padj, decreasing = F),],
"ensembl_peptide_id",
removeUnmappedRows = TRUE )
hits <- g_mapped$STRING_id[1:300]
mapped_pval05 <- string_db$add_diff_exp_color( subset(g_mapped, padj<0.05),
logFcColStr="log2FoldChange" )
enrichment <- string_db$get_enrichment( hits )
annotations <- string_db$get_annotations( hits )
write.table(mapped_pval05, file.path(table_dest, "mapped", out_table), sep = '\t')
write.table(enrichment, file.path(table_dest, "enrichment", out_table), sep = '\t')
write.table(annotations, file.path(table_dest, "annotations", out_table), sep = '\t')
payload_id <- string_db$post_payload( mapped_pval05$STRING_id,
colors=mapped_pval05$color )
jpeg(file.path(plot_dest, glue("{out_plot}_top300.jpeg")),
width = 9, height = 9, units = "in",
res = 300, quality = 100)
string_db$plot_network( hits, payload_id=payload_id )
dev.off()
clustersList <- string_db$get_clusters(g_mapped$STRING_id[1:1000])
for (i in c(1: length(clustersList))) {
if (length(clustersList[[i]]) > 4){
jpeg(file.path(plot_dest, glue("{out_plot}_cluster_{i}.jpeg")),
width = 9, height = 9, units = "in",
res = 300, quality = 100)
string_db$plot_network(clustersList[[i]], payload_id=payload_id)
dev.off()
}
}
sort(c(-1, 1, 0), decreasing = T)
data(geneList, package="DOSE")
geneList
